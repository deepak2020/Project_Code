package com.Dashboard.StepDefinations;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

import org.apache.commons.lang.math.RandomUtils;
import org.testng.Assert;

import com.Dashboard.global.PageFactory;

import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class LaunchpadStepDefinition extends PageFactory {

	String password = "test@123";
	String emailaddress;

	@When("^User generate random user for \"(.*)\"$")
	public void should_be_present_and_it_should_be_clickable(String client) {
		try {
			wait(3);
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/commonWebElement.properties",
							"admin_user_action_dropdown"), client);
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"create_user_icon"));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"first_name"),
					"firstnamechipotle" + RandomUtils.nextInt(100));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"last_name"),
					"lastnamechipotle" + RandomUtils.nextInt(100));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"password"), password);
			emailaddress = generateEmail(20);

			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"emailaddress"), emailaddress);
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties", "active"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"is_launchpad_admin"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"is_engagement_admin"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties", "submit"));
			click(".//*[@id='refresh_user_grant_permissions_table']");
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"create_user_icon"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"location"));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"select_location"), "Chipotle Mexican Grill");
			wait(10);
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"save_button"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"create_user_icon"));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"select_permission"), "engage");
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"save_button"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties", "submit"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"admin_logout"));
		} catch (Exception e) {
			Assert.fail(e.getMessage());
		}
	}

	@Then("^User create launchpad$")
	public void user_create_launchpad() {
		try {
			hoverClick(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"hover_element"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"create_launchpad"));
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			Date date = new Date();
			String name = dateFormat.format(date);
			type(getProperty("dashboardUIPropertiesFiles/launchpad.properties",
					"launchpad_name"), name);
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"save_launchpad"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"launchpad_tab"));
			String launchpad = getText(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"launchpad_title"));
			Assert.assertEquals(launchpad, name);
		} catch (Exception e) {
			Assert.fail(e.getMessage());

		}
	}

	@Then("^User clean launchpad$")
	public void user_clean_up_launchpad() {
		try {
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"delete_launchpad"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"delete_popup"));
			LoginPage().logoutDashboard();
		} catch (Exception e) {
			Assert.fail(e.getMessage());

		}
	}

	@Then("^User login to Dasboard with new user$")
	public void user_login_with_new_user() {
		try {
			open(getProperty("target/classes/config.properties", "app_url"));
			waitForElement(
					getProperty(
							"dashboardUIPropertiesFiles/loginWebElement.properties",
							"login_button"), 10);
			type(getProperty(
					"dashboardUIPropertiesFiles/loginWebElement.properties",
					"username_textbox"), emailaddress);
			type(getProperty(
					"dashboardUIPropertiesFiles/loginWebElement.properties",
					"password_textbox"), password);
			click(getProperty(
					"dashboardUIPropertiesFiles/loginWebElement.properties",
					"login_button"));

			waitForElement(
					getProperty(
							"dashboardUIPropertiesFiles/loginWebElement.properties",
							"title_prefix"), 20);
		} catch (Exception e) {
			Assert.fail(e.getMessage());

		}

	}

	@Then("^User clean up created user$")
	public void user_delete_new_user() {
		try {

			clickAndWait(getProperty(
					"dashboardUIPropertiesFiles/admin.properties",
					"admin_email_search_box"));
			typeAndEnter(
					getProperty("dashboardUIPropertiesFiles/admin.properties",
							"admin_email_search_box"), emailaddress);
			click(".//*[@title='" + emailaddress + "']");
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"admin_delete_icon"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"admin_delete_popup"));
			// click(getProperty(
			// "dashboardUIPropertiesFiles/launchpad.properties",
			// "admin_logout"));
		} catch (Exception e) {
			Assert.fail(e.getMessage());

		}

	}

	@Then("^User share launchpad with a \"(.*)\"$")
	public void user_share_launchpad(String user) {
		try {
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"share_the_launchpad"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"dashboard_only"));
			waitForElement(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"search_reciept"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"search_reciept"));
			if ((user != null)) {
				wait(3);
				typeAndEnter(
						getProperty(
								"dashboardUIPropertiesFiles/launchpad.properties",
								"search_reciept"), user);
				click(getProperty(
						"dashboardUIPropertiesFiles/launchpad.properties",
						"add_subscription"));
			}

			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"exit_subscription"));

		} catch (Exception e) {
			Assert.fail(e.getMessage());

		}

	}

	@Then("^User update launchpad \"(.*)\" frequency$")
	public void user_update_frequency(String frequency) {
		try {
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"launchpad_preference"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"edit_preference"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"enter_frequency"));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"enter_frequency"), frequency);
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"save_frequency"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"close_preference"));
		} catch (Exception e) {
			Assert.fail(e.getMessage());
		}

	}
}
