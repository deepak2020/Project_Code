package com.Dashboard.StepDefinations;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

import org.apache.commons.lang.math.RandomUtils;
import org.testng.Assert;

import com.Dashboard.global.PageFactory;

import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class LaunchpadStepDefinition extends PageFactory {

	String password = "test@123";
	String emailaddress;

	@When("^User generate random user for \"(.*)\"$")
	public void should_be_present_and_it_should_be_clickable(String client) {
		try {
			wait(3);
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/commonWebElement.properties",
							"admin_user_action_dropdown"), client);
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"create_user_icon"));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"first_name"),
					"firstnamechipotle" + RandomUtils.nextInt(100));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"last_name"),
					"lastnamechipotle" + RandomUtils.nextInt(100));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"password"), password);
			emailaddress = generateEmail(20);

			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"emailaddress"), emailaddress);
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties", "active"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"is_launchpad_admin"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"is_engagement_admin"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties", "submit"));
			click(".//*[@id='refresh_user_grant_permissions_table']");
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"create_user_icon"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"location"));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"select_location"), "Chipotle Mexican Grill");
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"save_button"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"create_user_icon"));
			typeAndEnter(
					getProperty(
							"dashboardUIPropertiesFiles/launchpad.properties",
							"select_permission"), "engage");
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"save_button"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties", "submit"));
			click(getProperty(
					"dashboardUIPropertiesFiles/launchpad.properties",
					"admin_logout"));
		} catch (Exception e) {
			Assert.fail(e.getMessage());
		}
	}

	@Then("^User create and clean up launchpad$")
	public void user_create_and_clean_up() {
		hover(getProperty("dashboardUIPropertiesFiles/launchpad.properties",
				"hover_element"));
		hoverClick(getProperty("dashboardUIPropertiesFiles/launchpad.properties",
				"create_launchpad"));
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Date date = new Date();
		String name = dateFormat.format(date);
		type(getProperty("dashboardUIPropertiesFiles/launchpad.properties",
				"launchpad_name"), name);
		click(getProperty("dashboardUIPropertiesFiles/launchpad.properties",
				"save_launchpad"));
		click(getProperty(
				"dashboardUIPropertiesFiles/launchpad.properties",
				"launchpad_tab"));
		String launchpad = getText(getProperty(
				"dashboardUIPropertiesFiles/launchpad.properties",
				"launchpad_title"));
		Assert.assertEquals(launchpad, name);
		click(getText(getProperty(
				"dashboardUIPropertiesFiles/launchpad.properties",
				"delete_launchpad")));
		click(getText(getProperty(
				"dashboardUIPropertiesFiles/launchpad.properties",
				"delete_popup")));
		
		LoginPage().logoutDashboard();
	}

	@Then("^User login to Dasboard with new user$")
	public void user_login_with_new_user() {
		open(getProperty("target/classes/config.properties", "app_url"));
		waitForElement(
				getProperty(
						"dashboardUIPropertiesFiles/loginWebElement.properties",
						"login_button"), 10);
		type(getProperty(
				"dashboardUIPropertiesFiles/loginWebElement.properties",
				"username_textbox"), emailaddress);
		type(getProperty(
				"dashboardUIPropertiesFiles/loginWebElement.properties",
				"password_textbox"), password);
		click(getProperty(
				"dashboardUIPropertiesFiles/loginWebElement.properties",
				"login_button"));

		waitForElement(
				getProperty(
						"dashboardUIPropertiesFiles/loginWebElement.properties",
						"title_prefix"), 20);

	}
}
